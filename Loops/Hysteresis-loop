
//NOTES: hysteresisRadius should be chosen to be half the noise range (1ms/2.0 on windows, for example)
// "5.0 * hysteresisRadius" is not an educated guess as the upper bound to ensure stability (will be proved in the thesis)

 
                                 //begin: update mechanism 
void update(double dt)
{
  m_timeAccu+= dt;
  int numUpdates = 0;

  while(true)
  {                                          // If a "fixpoint" is too close above the threshold, move the threshold "down".
         if((m_timeAccu >= m_updateInterval + m_hysteresisRadius) && (timeAccu <  m_updateInterval + 5.0 * m_hysteresisRadius) )
	  {
            m_triggerOffset = -m_hysteresisRadius;
	  }
                                             // If a "fixpoint" is too close below the threshold, move the threshold "up".
	  if((m_timeAccu >= m_updateInterval - 5.0 * m_hysteresisRadius) && (m_timeAccu < m_updateInterval - m_hysteresisRadius) )
	  {
	    m_triggerOffset = m_hysteresisRadius;
	  }

	  if (m_timeAccu < m_updateInterval + m_triggerOffset)
	  {
	    break;
	  }

	  numUpdates++;
	  m_timeAccu -= m_updateInterval;
  }
  
  return numUpdates;
}
                                     //end: update mechanism
